document.addEventListener('DOMContentLoaded', () => {
  const searchInput = document.getElementById('search-input');
  const searchButton = document.getElementById('search-button'); // L·∫•y n√∫t t√¨m ki·∫øm b·∫±ng ID
  const recommendedBooksContainer = document.getElementById('recommended-books'); // C√≥ th·ªÉ ƒë√£ c√≥

    //chuy·ªÉn trang t·ª´ home.html v·ªÅ home.html
  const siteTitle = document.getElementById('site-title');
  const userId = localStorage.getItem('user_id');
    console.log('[KH·ªûI ƒê·ªòNG] User ID t·ª´ localStorage:', userId); // Log ƒë·ªÉ ki·ªÉm tra

  if (siteTitle) { // Lu√¥n ki·ªÉm tra ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi th√™m listener
    siteTitle.addEventListener('click', () => {
    window.location.href = 'home.html'; // D√≤ng n√†y s·∫Ω chuy·ªÉn trang
  });
}

//L√†m tim 
async function handleLikeBook(bookId, likeButtonElement) {
        const userId = localStorage.getItem('user_id'); // Ho·∫∑c 'username' n·∫øu ƒë√≥ l√† ƒë·ªãnh danh ch√≠nh
        const username = localStorage.getItem('username'); // Gi·∫£ s·ª≠ b·∫°n c≈©ng l∆∞u username

        // Backend c·ªßa b·∫°n s·∫Ω c·∫ßn bi·∫øt ƒë·ªãnh danh ng∆∞·ªùi d√πng.
        // G·ª≠i user_id n·∫øu c√≥, n·∫øu kh√¥ng th√¨ g·ª≠i username.
        const userIdentifier = userId || username;
        if (!userIdentifier) {
            alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ c√≥ th·ªÉ th√≠ch s√°ch!');
            // C√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p ·ªü ƒë√¢y
            // window.location.href = 'login.html';
            return;
        }

        // X√°c ƒë·ªãnh lo·∫°i ƒë·ªãnh danh ƒë·ªÉ backend x·ª≠ l√Ω ph√π h·ª£p
        const identifierType = userId ? 'userId' : 'username';

        console.log(`Attempting to like book: ${bookId} by user: ${userIdentifier} (type: ${identifierType})`);

        try {
            // --- G·ªåI API BACKEND ƒê·ªÇ T·∫†O QUAN H·ªÜ NEO4J ---
            // B·∫°n c·∫ßn t·∫°o m·ªôt endpoint ·ªü backend (v√≠ d·ª•: /api/like-book)
            // Endpoint n√†y s·∫Ω nh·∫≠n userId/username v√† bookId, sau ƒë√≥ t·∫°o quan h·ªá [:LIKES]
            const response = await fetch('http://localhost:7777/api/like-book', { // <<--- ƒê√ÇY L√Ä ENDPOINT BACKEND C·ª¶A B·∫†N
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    identifier: userIdentifier,
                    identifierType: identifierType, // 'userId' ho·∫∑c 'username'
                    bookId: bookId // ƒê√¢y n√™n l√† m·ªôt ID duy nh·∫•t c·ªßa s√°ch (v√≠ d·ª•: book.id, book.isbn)
                                   // N·∫øu ch·ªâ c√≥ book.title, h√£y c·∫©n th·∫≠n v√¨ title c√≥ th·ªÉ kh√¥ng duy nh·∫•t
                }),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `L·ªói HTTP! Status: ${response.status}` }));
                throw new Error(errorData.message || `L·ªói HTTP! Status: ${response.status}`);
            }

            const result = await response.json();
            console.log('Ph·∫£n h·ªìi t·ª´ server (like book):', result);

            // --- C·∫¨P NH·∫¨T GIAO DI·ªÜN N√öT TIM ---
            if (likeButtonElement) {
                // V√≠ d·ª•: Thay ƒë·ªïi tr·∫°ng th√°i c·ªßa n√∫t tim
                // N·∫øu backend tr·∫£ v·ªÅ tr·∫°ng th√°i "liked" ho·∫∑c "unliked" th√¨ t·ªët h∆°n
                if (result.status === 'liked') {
                    likeButtonElement.classList.add('liked');
                    likeButtonElement.innerHTML = '‚ù§Ô∏è'; // Tim ƒë·ªè (ƒë√£ th√≠ch)
                } else if (result.status === 'unliked') {
                    likeButtonElement.classList.remove('liked');
                    likeButtonElement.innerHTML = 'ü§ç'; // Tim tr·∫Øng (ch∆∞a th√≠ch/b·ªè th√≠ch)
                } else {
                    // Ho·∫∑c ƒë∆°n gi·∫£n l√† toggle n·∫øu backend kh√¥ng tr·∫£ v·ªÅ tr·∫°ng th√°i c·ª• th·ªÉ
                    likeButtonElement.classList.toggle('liked');
                    if (likeButtonElement.classList.contains('liked')) {
                        likeButtonElement.innerHTML = '‚ù§Ô∏è';
                    } else {
                        likeButtonElement.innerHTML = 'ü§ç';
                    }
                }
            }
            // (T√πy ch·ªçn) C√≥ th·ªÉ g·ªçi l·∫°i fetchRecommendedBooks ho·∫∑c h√†m c·∫≠p nh·∫≠t UI kh√°c n·∫øu c·∫ßn

        } catch (error) {
            console.error('L·ªói khi th·ª±c hi·ªán h√†nh ƒë·ªông th√≠ch s√°ch:', error);
            alert('ƒê√£ x·∫£y ra l·ªói: ' + error.message);
        }
    }
// END L√ÄM TIM


  // C√°c h√†m kh√°c c·ªßa trang ch·ªß (displayBooks, fetchRecommendedBooks) ·ªü ƒë√¢y
  // ... (gi·ªØ nguy√™n n·∫øu b·∫°n ƒë√£ c√≥)
 // H√†m t·∫°o m·ªôt th·∫ª s√°ch (book card) - c√≥ th·ªÉ b·∫°n ƒë√£ c√≥ h√†m t∆∞∆°ng t·ª±, gi·ªù n√≥ ƒë∆∞·ª£c c·∫£i ti·∫øn
    function createBookCard(book, allBookIdsSet) { // allBookIdsSet l√† Set ƒë·ªÉ thu th·∫≠p ID s√°ch
        const bookCard = document.createElement('div');
        bookCard.classList.add('book-card');

        const apiRatingValue = book.rating;
        const displayRating = (apiRatingValue !== undefined && apiRatingValue !== null && apiRatingValue !== 'N/A' && !isNaN(parseFloat(apiRatingValue)))
                          ? parseFloat(apiRatingValue).toFixed(1)
                          : 'N/A';

        const bookIdentifier = book.id;
        if (bookIdentifier && allBookIdsSet) {
            allBookIdsSet.add(bookIdentifier);
        }

        const imagePath = (book.cover && book.cover !== 'N/A' && !book.cover.toLowerCase().includes('default')) ? `images/${book.cover}.jpg` : 'images/default.jpg';
        const title = book.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ';
        const author = book.author || 'N/A';
        const category = book.category || 'N/A';
        const rating = (book.rating !== undefined && book.rating !== null && book.rating !== 'N/A') ? parseFloat(book.rating).toFixed(1) : 'N/A';

        let extraInfo = '';
        if (book.likeCount !== undefined && book.likeCount !== null) {
            extraInfo += `<p><strong>L∆∞·ª£t th√≠ch:</strong> ${book.likeCount}</p>`;
        }
      
        bookCard.innerHTML = `
            <img src="${imagePath}" alt="${title}" title="${title}" onerror="this.onerror=null; this.src='images/default.jpg';">
            <h3>${title}</h3>
            <p><strong>T√°c gi·∫£:</strong> ${author}</p>
            <p><strong>Th·ªÉ lo·∫°i:</strong> ${category}</p>
            <p><strong>Rate:</strong> ${displayRating}</p>
            ${extraInfo}
            ${bookIdentifier && userId ?
              `<button class="like-button" data-book-id="${bookIdentifier}" aria-label="Th√≠ch ${title}">
                  ü§ç
              </button>` : ''
            }
        `;

        if (bookIdentifier && userId) {
            const likeButton = bookCard.querySelector('.like-button');
            if (likeButton) {
                likeButton.addEventListener('click', (event) => {
                    event.stopPropagation();
                    handleLikeBook(bookIdentifier, likeButton);
                });
            }
        }
        return bookCard;
    }

    function createBookCard1(book, allBookIdsSet) { // allBookIdsSet l√† Set ƒë·ªÉ thu th·∫≠p ID s√°ch
      console.log('D·ªØ li·ªáu s√°ch nh·∫≠n ƒë∆∞·ª£c trong createBookCard1:', JSON.stringify(book, null, 2));//ktra
        const bookCard = document.createElement('div');
        bookCard.classList.add('book-card');

        const apiRatingValue = book.rating;
        const displayRating = (apiRatingValue !== undefined && apiRatingValue !== null && apiRatingValue !== 'N/A' && !isNaN(parseFloat(apiRatingValue)))
                          ? parseFloat(apiRatingValue).toFixed(1)
                          : 'N/A';

        const bookIdentifier = book.id;
        if (bookIdentifier && allBookIdsSet) {
            allBookIdsSet.add(bookIdentifier);
        }

        const imagePath = (book.cover && book.cover !== 'N/A' && !book.cover.toLowerCase().includes('default')) ? `images/${book.cover}.jpg` : 'images/default.jpg';
        const title = book.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ';
        const category = book.category || 'N/A';
        const rating = (book.rating !== undefined && book.rating !== null && book.rating !== 'N/A') ? parseFloat(book.rating).toFixed(1) : 'N/A';

        let extraInfo = '';
        if (book.likeCount !== undefined && book.likeCount !== null) {
            extraInfo += `<p><strong>L∆∞·ª£t th√≠ch:</strong> ${book.likeCount}</p>`;
        }
       /* if (book.averageRating !== undefined && book.averageRating !== null) {
            const avgRatingVal = (typeof book.averageRating === 'number') ? book.averageRating.toFixed(2) : book.averageRating;
            extraInfo += `<p><strong>ƒêi·ªÉm TB:</strong> ${avgRatingVal}</p>`;
        }*/

        bookCard.innerHTML = `
            <img src="${imagePath}" alt="${title}" title="${title}" onerror="this.onerror=null; this.src='images/default.jpg';">
            <h3>${title}</h3>
            <p><strong>Th·ªÉ lo·∫°i:</strong> ${category}</p>
            <p><strong>Rate:</strong> ${displayRating}</p>
            ${extraInfo}
            ${bookIdentifier && userId ?
              `<button class="like-button" data-book-id="${bookIdentifier}" aria-label="Th√≠ch ${title}">
                  ü§ç
              </button>` : ''
            }
        `;

        if (bookIdentifier && userId) {
            const likeButton = bookCard.querySelector('.like-button');
            if (likeButton) {
                likeButton.addEventListener('click', (event) => {
                    event.stopPropagation();
                    handleLikeBook(bookIdentifier, likeButton);
                });
            }
        }
        return bookCard;
    }

    // H√†m t·∫°o th·∫ª cho t√°c gi·∫£ v√† s√°ch n·ªïi b·∫≠t c·ªßa h·ªç (M·ªöI)
    function createAuthorCard(authorItem, allBookIdsSet) {
        const authorCardWrapper = document.createElement('div');
        authorCardWrapper.classList.add('book-card', 'author-feature-card'); // C√≥ th·ªÉ d√πng class book-card ho·∫∑c class ri√™ng

        const authorName = authorItem.authorName || 'N/A';
        const authorAvgScore = (authorItem.authorAvgScore !== undefined && authorItem.authorAvgScore !== null && authorItem.authorAvgScore !== 'N/A') ? parseFloat(authorItem.authorAvgScore).toFixed(2) : 'N/A';

        authorCardWrapper.innerHTML = `
            <div class="author-info-header" style="text-align:center; margin-bottom:10px;">
                <h4>T√°c gi·∫£: ${authorName}</h4>
                <p>ƒêi·ªÉm TB S√°ch: ${authorAvgScore}</p>
            </div>
            <p style="text-align:center; font-weight:bold;">S√°ch n·ªïi b·∫≠t:</p>
        `;

        if (authorItem.topBook && authorItem.topBook.id) {
            const topBookCard = createBookCard1(authorItem.topBook, allBookIdsSet);
            authorCardWrapper.appendChild(topBookCard);
        } else {
            authorCardWrapper.innerHTML += '<p>Ch∆∞a c√≥ th√¥ng tin s√°ch n·ªïi b·∫≠t.</p>';
        }
        return authorCardWrapper;
    }

    

    // H√†m ch√≠nh ƒë·ªÉ l·∫•y v√† hi·ªÉn th·ªã t·∫•t c·∫£ c√°c m·ª•c g·ª£i √Ω t·ª´ /home-sections (M·ªöI)
    async function fetchAndDisplayHomeSections() {
        if (!recommendedBooksContainer) { // S·ª≠ d·ª•ng bi·∫øn ƒë√£ ƒë·ªïi t√™n
            console.error('Kh√¥ng t√¨m th·∫•y container #recommended-books.');
            return;
        }
        recommendedBooksContainer.innerHTML = '<p style="text-align: center;">ƒêang t·∫£i c√°c m·ª•c g·ª£i √Ω...</p>';

        try {
            let apiUrl = 'http://localhost:7777/home-sections'; // Endpoint m·ªõi
            if (userId) {
                apiUrl += `?user_id=${encodeURIComponent(userId)}`;
            }

            const response = await fetch(apiUrl);
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `L·ªói HTTP! Status: ${response.status}` }));
                throw new Error(errorData.message || `L·ªói HTTP! Status: ${response.status}`);
            }
            const sectionsData = await response.json();
            console.log('D·ªØ li·ªáu sectionsData NH·∫¨N ƒê∆Ø·ª¢C ·ªü frontend:', JSON.stringify(sectionsData, null, 2));

            recommendedBooksContainer.innerHTML = ''; // X√≥a th√¥ng b√°o "ƒêang t·∫£i..."

            const sectionDisplayTitles = { // Ti√™u ƒë·ªÅ cho t·ª´ng m·ª•c
                byLikedCategory: "G·ª£i √Ω s√°ch d·ª±a tr√™n th·ªÉ lo·∫°i y√™u th√≠ch",
                byLikedAuthor: "G·ª£i √Ω s√°ch theo t√°c gi·∫£ y√™u th√≠ch",
                topRatedUninteracted: "G·ª£i √Ω s√°ch c√≥ ƒëi·ªÉm ƒë√°nh gi√° cao t·ª´ 4.2 ƒëi·ªÉm tr·ªü l√™n",
                topAuthorsAndBooks: "G·ª£i √Ω s√°ch d·ª±a tr√™n c√°c t√°c gi·∫£ ph·ªï bi·∫øn"
            };
            const allBookIdsDisplayed = new Set(); // Set ƒë·ªÉ ch·ª©a c√°c ID s√°ch ƒë√£ hi·ªÉn th·ªã

            for (const sectionKey in sectionsData) {
                const sectionTitleText = sectionDisplayTitles[sectionKey] || sectionKey.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
                const itemsInSection = sectionsData[sectionKey]; // ƒê·ªïi t√™n bi·∫øn cho r√µ r√†ng
                console.log(`Section: ${sectionKey}, S·ªë l∆∞·ª£ng items: ${Array.isArray(itemsInSection) ? itemsInSection.length : 'Kh√¥ng ph·∫£i m·∫£ng'}`);

                let shouldDisplaySection = (Array.isArray(itemsInSection) && itemsInSection.length > 0);
                if (!userId && (sectionKey === 'byLikedCategory' || sectionKey === 'byLikedAuthor')) {
                    shouldDisplaySection = true; 
                }

                if (shouldDisplaySection) {
                    const sectionWrapper = document.createElement('div');
                    sectionWrapper.classList.add('recommendation-section-wrapper');
                    sectionWrapper.style.marginBottom = '40px';

                    const titleElement = document.createElement('h2');
                    titleElement.classList.add('section-title');
                    titleElement.style.textAlign = 'center';
                    titleElement.style.marginBottom = '20px';
                    titleElement.textContent = sectionTitleText;
                    sectionWrapper.appendChild(titleElement);

                    const bookGridElement = document.createElement('div');
                    bookGridElement.classList.add('book-grid');

                    if (Array.isArray(itemsInSection) && itemsInSection.length > 0) {
                        if (sectionKey === 'topAuthorsAndBooks') {
                            itemsInSection.forEach(authorItem => { // itemsInSection gi·ªù l√† m·∫£ng c√°c authorItem
                                const authorCard = createAuthorCard(authorItem, allBookIdsDisplayed);
                                bookGridElement.appendChild(authorCard);
                            });
                        } else {
                            itemsInSection.forEach(book => { // itemsInSection l√† m·∫£ng c√°c book
                                const bookCard = createBookCard(book, allBookIdsDisplayed);
                                bookGridElement.appendChild(bookCard);
                            });
                        }
                    } else if (!userId && (sectionKey === 'byLikedCategory' || sectionKey === 'byLikedAuthor')) {
                        bookGridElement.innerHTML = '<p style="text-align:center;">ƒêƒÉng nh·∫≠p ƒë·ªÉ xem g·ª£i √Ω c√° nh√¢n h√≥a cho m·ª•c n√†y.</p>';
                    } else {
                         bookGridElement.innerHTML = '<p style="text-align:center;">Hi·ªán ch∆∞a c√≥ g·ª£i √Ω n√†o cho m·ª•c n√†y.</p>';
                    }
                    sectionWrapper.appendChild(bookGridElement);
                    recommendedBooksContainer.appendChild(sectionWrapper);
                }
            }

            if (allBookIdsDisplayed.size > 0 && userId) {
                fetchAndSetInitialLikeStatus(Array.from(allBookIdsDisplayed));
            }

        } catch (error) {
            console.error('L·ªói khi t·∫£i v√† hi·ªÉn th·ªã c√°c m·ª•c g·ª£i √Ω:', error);
            recommendedBooksContainer.innerHTML = '<p style="text-align: center;">Kh√¥ng th·ªÉ hi·ªÉn th·ªã g·ª£i √Ω. Vui l√≤ng th·ª≠ l·∫°i sau.</p>';
        }
    }

  // K·∫æT TH√öC C√ÅC H√ÄM KH√ÅC

      // --- H√ÄM L·∫§Y V√Ä C√ÄI ƒê·∫∂T TR·∫†NG TH√ÅI TH√çCH BAN ƒê·∫¶U ---
    async function fetchAndSetInitialLikeStatus(bookIds) {
        const username = localStorage.getItem('username');
        const userId = localStorage.getItem('user_id');
        const userIdentifier = userId || username;

        if (!userIdentifier || !Array.isArray(bookIds) || bookIds.length === 0) {
            return;
        }
        const identifierType = userId ? 'userId' : 'username';

        try {
            // B·∫°n c·∫ßn t·∫°o endpoint n√†y ·ªü backend, v√≠ d·ª•: /api/get-user-liked-books
            // N√≥ s·∫Ω tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c bookId m√† ng∆∞·ªùi d√πng ƒë√£ th√≠ch
            const response = await fetch(`http://localhost:7777/api/get-user-liked-books?identifier=${encodeURIComponent(userIdentifier)}&identifierType=${identifierType}`);
            if (!response.ok) {
                console.error('Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i th√≠ch c·ªßa s√°ch.');
                return;
            }
            const likedBookIds = await response.json(); // Gi·∫£ s·ª≠ backend tr·∫£ v·ªÅ { likedBookIds: [...] }

            if (Array.isArray(likedBookIds.likedBookIds)) {
                bookIds.forEach(bookId => {
                    const likeButton = document.querySelector(`.like-button[data-book-id="${bookId}"]`);
                    if (likeButton && likedBookIds.likedBookIds.includes(bookId)) {
                        likeButton.classList.add('liked');
                        likeButton.innerHTML = '‚ù§Ô∏è';
                    }
                });
            }
        } catch (error) {
            console.error('L·ªói khi l·∫•y tr·∫°ng th√°i th√≠ch ban ƒë·∫ßu:', error);
        }
    }

  // TH√äM LOGIC CHUY·ªÇN H∆Ø·ªöNG KHI NH·∫§N N√öT T√åM
  searchButton.addEventListener('click', () => {
    const query = searchInput.value.trim();
    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn search.html v√† truy·ªÅn t·ª´ kh√≥a t√¨m ki·∫øm qua URL parameter 'query'
    window.location.href = `search.html?query=${encodeURIComponent(query)}`;
    
    
  });

  // G·ªçi h√†m ƒë·ªÉ t·∫£i s√°ch ƒë·ªÅ xu·∫•t khi trang t·∫£i
  if (recommendedBooksContainer) { // Ch·ªâ g·ªçi n·∫øu container t·ªìn t·∫°i
      fetchAndDisplayHomeSections();
    } else {
      console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #recommended-books ƒë·ªÉ hi·ªÉn th·ªã g·ª£i √Ω.");
    }
});
