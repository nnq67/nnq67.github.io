document.addEventListener('DOMContentLoaded', () => {
  const searchForm = document.getElementById('search-form');
  const searchInput = document.getElementById('search-input');
  const searchResultsContainer = document.getElementById('search-results');
  const siteTitle = document.getElementById('site-title');

  if (siteTitle) {
    siteTitle.addEventListener('click', () => {
      window.location.href = 'home.html';
    });
  }

  // --- H√ÄM X·ª¨ L√ù KHI TH√çCH M·ªòT CU·ªêN S√ÅCH ---
  async function handleLikeBook(bookId, likeButtonElement) {
    console.count("handleLikeBookExecution");
    console.trace("handleLikeBook was called from:");

    const userId = localStorage.getItem('user_id');
    const username = localStorage.getItem('username');
    const userIdentifier = userId || username;

    if (!userIdentifier) {
      alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ c√≥ th·ªÉ th√≠ch s√°ch!');
      // C√¢n nh·∫Øc chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p n·∫øu c·∫ßn
      // window.location.href = 'login.html';
      return;
    }
    const identifierType = userId ? 'userId' : 'username';

    console.log(`Attempting to like book (search page): ${bookId} by user: ${userIdentifier} (type: ${identifierType})`);

    try {
      const response = await fetch('http://localhost:7777/api/like-book', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          identifier: userIdentifier,
          identifierType: identifierType,
          bookId: bookId // bookId n√†y ph·∫£i l√† ID duy nh·∫•t c·ªßa s√°ch (v√≠ d·ª•: book.id)
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: `L·ªói HTTP! Status: ${response.status}` }));
        throw new Error(errorData.message || `L·ªói HTTP! Status: ${response.status}`);
      }

      const result = await response.json();
      console.log('Ph·∫£n h·ªìi t·ª´ server (like book - search page):', result);

      if (likeButtonElement) {
        if (result.status === 'liked') {
          likeButtonElement.classList.add('liked');
          likeButtonElement.innerHTML = '‚ù§Ô∏è'; // Tim ƒë·ªè
        } else if (result.status === 'unliked') {
          likeButtonElement.classList.remove('liked');
          likeButtonElement.innerHTML = 'ü§ç'; // Tim tr·∫Øng
        } else {
          // Fallback n·∫øu server kh√¥ng tr·∫£ v·ªÅ status c·ª• th·ªÉ
          likeButtonElement.classList.toggle('liked');
          likeButtonElement.innerHTML = likeButtonElement.classList.contains('liked') ? '‚ù§Ô∏è' : 'ü§ç';
        }
      }
    } catch (error) {
      console.error('L·ªói khi th·ª±c hi·ªán h√†nh ƒë·ªông th√≠ch s√°ch (search page):', error);
      alert('ƒê√£ x·∫£y ra l·ªói khi th√≠ch s√°ch: ' + error.message);
    }
  }

  // --- H√ÄM L·∫§Y V√Ä C√ÄI ƒê·∫∂T TR·∫†NG TH√ÅI TH√çCH BAN ƒê·∫¶U ---
  async function fetchAndSetInitialLikeStatus(bookIds) {
    const userId = localStorage.getItem('user_id');
    const username = localStorage.getItem('username');
    const userIdentifier = userId || username;

    if (!userIdentifier || !Array.isArray(bookIds) || bookIds.length === 0) {
      return;
    }
    const identifierType = userId ? 'userId' : 'username';

    try {
      // Endpoint n√†y c·∫ßn ƒë∆∞·ª£c t·∫°o ·ªü backend, v√≠ d·ª•: /api/get-user-liked-books
      // N√≥ s·∫Ω tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c bookId m√† ng∆∞·ªùi d√πng ƒë√£ th√≠ch
      const response = await fetch(`http://localhost:7777/api/get-user-liked-books?identifier=${encodeURIComponent(userIdentifier)}&identifierType=${identifierType}`);
      if (!response.ok) {
        console.error('Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i th√≠ch c·ªßa s√°ch (search page).');
        return;
      }
      const likedData = await response.json(); // Gi·∫£ s·ª≠ backend tr·∫£ v·ªÅ { likedBookIds: [...] }

      if (Array.isArray(likedData.likedBookIds)) {
        bookIds.forEach(bookId => {
          // Quan tr·ªçng: ƒê·∫£m b·∫£o bookId kh√¥ng ph·∫£i l√† null ho·∫∑c undefined
          if (bookId) {
            const likeButton = document.querySelector(`.like-button[data-book-id="${bookId}"]`);
            if (likeButton && likedData.likedBookIds.includes(bookId)) {
              likeButton.classList.add('liked');
              likeButton.innerHTML = '‚ù§Ô∏è';
            }
          }
        });
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y tr·∫°ng th√°i th√≠ch ban ƒë·∫ßu (search page):', error);
    }
  }

  // H√†m ƒë·ªÉ hi·ªÉn th·ªã s√°ch trong ph·∫ßn t·ª≠ ch·ª©a ƒë√£ ch·ªâ ƒë·ªãnh
  function displayBooks(books, containerElement) {
    containerElement.innerHTML = ''; // X√≥a n·ªôi dung c≈©

    if (!Array.isArray(books) || books.length === 0) {
      containerElement.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y s√°ch n√†o.</p>';
      return;
    }

    const displayedBookIds = []; // Thu th·∫≠p ID s√°ch ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i th√≠ch

    books.forEach(book => {
      const bookCard = document.createElement('div');
      bookCard.classList.add('book-card'); // Th√™m class ƒë·ªÉ t·∫°o ki·ªÉu
      
      // QUAN TR·ªåNG: ƒê·∫£m b·∫£o 'book' object t·ª´ API t√¨m ki·∫øm c√≥ thu·ªôc t√≠nh 'id'
      // API /search-books c·∫ßn tr·∫£ v·ªÅ tr∆∞·ªùng 'id' cho m·ªói cu·ªën s√°ch.
      const bookIdentifier = book.id; 
      
      if (!bookIdentifier) {
          // N·∫øu kh√¥ng c√≥ ID, n√∫t tim s·∫Ω kh√¥ng ƒë∆∞·ª£c hi·ªÉn th·ªã cho s√°ch n√†y.
          console.warn('S√°ch kh√¥ng c√≥ thu·ªôc t√≠nh "id" trong k·∫øt qu·∫£ t√¨m ki·∫øm:', book);
      } else {
        displayedBookIds.push(bookIdentifier); // Th√™m v√†o danh s√°ch n·∫øu c√≥ ID h·ª£p l·ªá
      }

      const imagePath = book.cover ? `images/${book.cover}.jpg` : 'images/default.jpg';
      
      // ƒêi·ªÅn d·ªØ li·ªáu v√†o th·∫ª s√°ch
      bookCard.innerHTML = `
        <img src="${imagePath}" alt="${book.title}" title="${book.title}" onerror="this.onerror=null; this.src='images/default.jpg';">
        <h3>${book.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'}</h3>
        <p><strong>T√°c gi·∫£:</strong> ${book.author || 'N/A'}</p>
        <p><strong>Rate:</strong> ${book.rating || 'N/A'}</p>
        ${bookIdentifier ? // Ch·ªâ hi·ªÉn th·ªã n√∫t tim n·∫øu c√≥ bookIdentifier (ID s√°ch)
          `<button class="like-button" data-book-id="${bookIdentifier}" aria-label="Th√≠ch s√°ch n√†y">
              ü§ç </button>` : ''
        }
      `;
      containerElement.appendChild(bookCard);

      // Th√™m event listener cho n√∫t tim n·∫øu c√≥ bookIdentifier
      if (bookIdentifier) {
        const likeButton = bookCard.querySelector('.like-button');
        if (likeButton) {
          likeButton.addEventListener('click', (event) => {
            console.count("LikeButtonClick"); // ƒê·∫øm s·ªë l·∫ßn listener n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t
            console.log("Clicked button element:", likeButton); // Log ch√≠nh ph·∫ßn t·ª≠ n√∫t ƒë∆∞·ª£c click
            event.stopPropagation(); // NgƒÉn s·ª± ki·ªán click c·ªßa card (n·∫øu c√≥)
            handleLikeBook(bookIdentifier, likeButton); // G·ªçi h√†m x·ª≠ l√Ω like
          });
        }
      }
    });

    // Sau khi hi·ªÉn th·ªã t·∫•t c·∫£ s√°ch, l·∫•y tr·∫°ng th√°i th√≠ch ban ƒë·∫ßu
    if (displayedBookIds.length > 0) {
      fetchAndSetInitialLikeStatus(displayedBookIds);
    }
  }

  // H√†m ƒë·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm s√°ch
  async function performSearch(query) {
    if (!query) {
      searchResultsContainer.innerHTML = '<p>Vui l√≤ng nh·∫≠p t√™n s√°ch v√†o √¥ t√¨m ki·∫øm.</p>';
      return;
    }

    searchResultsContainer.innerHTML = '<p>ƒêang t√¨m ki·∫øm s√°ch...</p>';

    try {
      // G·ªçi API t√¨m ki·∫øm s√°ch tr√™n c·ªïng 7777, s·ª≠ d·ª•ng tham s·ªë 'query'
      const response = await fetch(`http://localhost:7777/search-books?query=${encodeURIComponent(query)}`);
      if (!response.ok) {
        throw new Error(`L·ªói HTTP! status: ${response.status}`);
      }
      const books = await response.json();
      displayBooks(books, searchResultsContainer); // Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
    } catch (error) {
      console.error('L·ªói khi t√¨m ki·∫øm s√°ch:', error);
      searchResultsContainer.innerHTML = '<p>Kh√¥ng th·ªÉ t√¨m ki·∫øm s√°ch. Vui l√≤ng th·ª≠ l·∫°i sau.</p>';
    }
  }

  // X·ª≠ l√Ω vi·ªác g·ª≠i bi·ªÉu m·∫´u t√¨m ki·∫øm tr√™n trang search.html
  searchForm.addEventListener('submit', async (event) => {
    event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi g·ª≠i bi·ªÉu m·∫´u m·∫∑c ƒë·ªãnh

    const query = searchInput.value.trim();
    // C·∫≠p nh·∫≠t URL ƒë·ªÉ ph·∫£n √°nh t·ª´ kh√≥a t√¨m ki·∫øm m·ªõi (t√πy ch·ªçn)
    window.history.pushState({}, '', `search.html?query=${encodeURIComponent(query)}`);
    performSearch(query);
  });

  // Khi trang search.html t·∫£i, ki·ªÉm tra URL ƒë·ªÉ xem c√≥ t·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng
  const urlParams = new URLSearchParams(window.location.search);
  const initialQuery = urlParams.get('query');

  if (initialQuery) {
    searchInput.value = initialQuery; // ƒêi·ªÅn t·ª´ kh√≥a v√†o √¥ t√¨m ki·∫øm
    performSearch(initialQuery); // Th·ª±c hi·ªán t√¨m ki·∫øm ngay l·∫≠p t·ª©c
  } else {
    searchResultsContainer.innerHTML = '<p>Nh·∫≠p t√™n s√°ch v√†o √¥ t√¨m ki·∫øm ƒë·ªÉ b·∫Øt ƒë·∫ßu.</p>';
  }
});